// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BaseballMachineLearningWorkbench.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using BaseballMachineLearningWorkbench;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using BaseballMachineLearningWorkbench.MachineLearning;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using BaseballMachineLearningWorkbench.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using BaseballMachineLearningWorkbench.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using BaseballMachineLearningWorkbench.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Microsoft.Extensions.ML;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
    public partial class BaseballCardParent : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 57 "C:\Bart-MLB\MachineLearning-BaseballPrediction-BlazorApp\BaseballMachineLearningWorkbench\Components\BaseballCardParent.razor"
       

    /* Parameters */

    [Parameter]
    public bool MultipleModels { get; set; } = false;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SubTitle { get; set; }

    [Parameter]
    public string Notes { get; set; } = string.Empty;

    [Parameter]
    public MLModelPredictionType MLModelPredictionType { get; set; } = MachineLearning.MLModelPredictionType.InductedToHallOfFameGeneralizedAdditiveModel;

    [Parameter]
    public bool UseMachineLearningModel { get; set; } = true;

    [Parameter]
    public bool StaticPrediction { get; set; } = true;

    [Parameter]
    public MLBBaseballBatter BaseBallBatter { get; set; }

    [Parameter]
    public int NumberOfSeasonsPlayed { get; set; }

    public string WhatIfUrl
    {
        get
        {
            return Util.GetWhatIfUrl(UseMachineLearningModel, MultipleModels, BaseBallBatter, numberOfSeasonsPlayed);
        }
    }

    /* Variables */
    private int numberOfSeasonsPlayed = 1;
    MLBBaseballBatter baseBallBatterCalculated;

    // parameters to send in
    MLBBaseballBatter BaseBallBatterParameter = null;
    MLBHOFPrediction PredictionParameterHallOfFameInduction = null;
    MLBHOFPrediction PredictionParameterOnHallOfFameBallot = null;

    protected override void OnParametersSet()
    {
        if (!(BaseBallBatterParameter is null))
        {
            // If NumberOfSeasonsPlayed parameter is not zero, then it was passed in via parent page and/or URL
            if (this.NumberOfSeasonsPlayed == 0)
            {
                numberOfSeasonsPlayed = (int) BaseBallBatter.YearsPlayed;
            }

            // Check if new parameter is newer than the current
            if (BaseBallBatter != BaseBallBatterParameter)
            {
                MakeBaseballPredictions();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        numberOfSeasonsPlayed = this.NumberOfSeasonsPlayed;

        //// Note: Only first page call is expensive
        await this.MakeBaseballPredictions();
    }

    private Task MakeBaseballPredictions()
    {
        logger.LogInformation($"MakeBaseballPredictions| StaticPrediction: {StaticPrediction} UseMachineLearningModel: {UseMachineLearningModel} MultipleModels: {MultipleModels}");

        if (!StaticPrediction)
        {
            // Calculate the adjusted statistics for the player
            baseBallBatterCalculated = BaseBallBatter.CalculateStatisticsProratedBySeason(numberOfSeasonsPlayed);
            BaseBallBatterParameter = baseBallBatterCalculated;
        }
        else
        {
            BaseBallBatterParameter = this.BaseBallBatter;
        }

        if (UseMachineLearningModel)
        {
            // Make ML Model Prediction
            PredictionParameterHallOfFameInduction = _predictionEnginePool.Predict(MachineLearning.MLModelPredictionType.InductedToHallOfFameGeneralizedAdditiveModel.ToString(),
                BaseBallBatterParameter);

            // If surfacing multiple models include the prediction for On Hall of Fame Ballot
            if (MultipleModels)
            {
                // Make ML Model Prediction
                PredictionParameterOnHallOfFameBallot = _predictionEnginePool.Predict(MachineLearning.MLModelPredictionType.OnHallOfFameBallotGeneralizedAdditiveModel.ToString(),
            BaseBallBatterParameter);
            }
        }
        else
        {
            // Make Rules based Prediction
            PredictionParameterHallOfFameInduction = BaseBallBatterParameter.GetHallOfFameInductionPredictionBasedOn500HrRule();
        }

#if DEBUG
        System.Diagnostics.Debug.WriteLine(BaseBallBatterParameter);
#endif

        logger.LogInformation($"MakeBaseballPredictions| BaseBallBatterParameter: {BaseBallBatterParameter.FullPlayerName}, {BaseBallBatterParameter.LastYearPlayed}");
        return Task.CompletedTask;
    }

    private void SliderMoved(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            numberOfSeasonsPlayed = index;

            MakeBaseballPredictions();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogger<BaseballCardParent> logger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BaseballDataSampleService BaseballDataService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PredictionEnginePool<MLBBaseballBatter, MLBHOFPrediction> _predictionEnginePool { get; set; }
    }
}
#pragma warning restore 1591
